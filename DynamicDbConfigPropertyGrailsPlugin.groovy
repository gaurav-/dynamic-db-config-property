class DynamicDbConfigPropertyGrailsPlugin {
    // the plugin version
    def version = "0.0.1"
    // the version or versions of Grails the plugin is designed for
    def grailsVersion = "2.1 > *"
    // the other plugins this plugin depends on
    def dependsOn = [:]
    // resources that are excluded from plugin packaging
    def pluginExcludes = [
        "grails-app/views/error.gsp"
    ]

    // TODO Fill in these fields
    def title = "Dynamic Db Config Property Plugin" // Headline display name of the plugin
    def author = "Guanyu Guo"
    def authorEmail = "ggy1986@163.com"
    def description = '''\
This plugin gives your application the ability to change the config properties without restarting the application. The values in Config.groovy are persisted in database when application is run-for the first time after installing the plugin. Meanwhile, for one Grails Project, usually more than 50 properties in config.groovy, but most them are generated by Grails framework. Indeed, there is only a small portion of properties as frequently-used ones in your config.groovy that is needed to maintain regularly. What we are concerned about is the frequently-used properties. Therefore, there is a interface to help you to simply tick boxes to move the properties you want to maintain forwards to the frequently-used management page. Then all management operations such as CRUD are in the management page. More importantly, only those properties marked as frequently-used ones in "Manage Frequently-Used Property" page are synchronized with GrailsApplication.config object, which is quite handy for you to focus on managing these useful ones.

It is sometimes true that you could not restart server to add a new property when the server is busy running. After using the plugin, it works even you only create the new property in Database and have not added in Config.groovy yet.

In addition, in the "Property Status" page you could check the previously default values in Config.groovy and the currently active values on running.
'''

    // URL to the plugin's documentation
    def documentation = "http://grails.org/plugin/dynamic-db-config-property"

    // Extra (optional) plugin metadata

    // License: one of 'APACHE', 'GPL2', 'GPL3'
//    def license = "APACHE"

    // Details of company behind the plugin (if there is one)
//    def organization = [ name: "My Company", url: "http://www.my-company.com/" ]

    // Any additional developers beyond the author specified above.
    def developers = [ [ name: "Peter Newnam", email: "pnewnam@uow.edu.au" ], [ name: "Zoran Stojakovic", email: "zorans@uow.edu.au" ]]

    // Location of the plugin's issue tracker.
    def issueManagement = [ system: "Github", url: "https://github.com/ggylyq1986/dynamic-db-config-property/issues" ]

    // Online location of the plugin's browseable source code.
//    def scm = [ url: "http://svn.codehaus.org/grails-plugins/" ]

    def doWithWebDescriptor = { xml ->
        // TODO Implement additions to web.xml (optional), this event occurs before
    }

    def doWithSpring = {
        // TODO Implement runtime spring config (optional)
    }

    def doWithDynamicMethods = { ctx ->
        // TODO Implement registering dynamic methods to classes (optional)
    }

    def doWithApplicationContext = { applicationContext ->
        // TODO Implement post initialization spring config (optional)
    }

    def onChange = { event ->
        // TODO Implement code that is executed when any artefact that this plugin is
        // watching is modified and reloaded. The event contains: event.source,
        // event.application, event.manager, event.ctx, and event.plugin.
    }

    def onConfigChange = { event ->
        // TODO Implement code that is executed when the project configuration changes.
        // The event is the same as for 'onChange'.
    }

    def onShutdown = { event ->
        // TODO Implement code that is executed when the application shuts down (optional)
    }
}
